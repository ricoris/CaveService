=====================================================================
== CaveService REST API specification                              ==
=====================================================================
This is the specification for the CaveService, which is intended to 
handle rooms and exits to those rooms. There are 4 operations in the 
CaveService as outlined below. 

Versioning of the REST API is done as a part of the URI part of 
the contract as described at: https://www.baeldung.com/rest-versioning 
section 2.1
	
Versions	Description					Author			Date
--------------------------------------------------------------------
v2			initial specification		Team Alpha		02.11.2021
v2			Same version, noone has 	Team Alpha		08.11.2021
			implemented it yet
			
			Body returned on post com-
			mands
			
			Removed 403 on post com-
			mands as this cannot hap-
			pen
			
			Returned list with direc-
			tions in get exits
			
			Changed path to indicate, 
			that exits are in the 
			context of a room at 
			{position}
			
v2			Removed post on exit 
			because exits can be 
			derived from surrounding 
			rooms. There is	therefore 
			no need for posting
			exits.
			
v2			Seperate create/update 		Team Alpha		08.11.2021
			into PUT/POST

Room
	POST	: Create/Update a room
	GET		: Get information about the room at position
	
	Default rooms must be created by the caller. The service will not 
	create them by itself.
	
	
Exit 
	GET		: Get all possible exits from room at {position}
	
	Exit directions are specified by NORTH, SOUTH, EAST, WEST, UP, DOWN
	
	

====================================================================	
Update a room
====================================================================
POST /v2/room/{position} HTTP/1.1
Content-Type: application/json

	{
		description: "LirumLarum",
		creatorId: 42
	}

Response
	
	Status: 200 Success
	Location: /v2/room/{position}
	{
			creatorId: 42,
			description: "LirumLarum",
			creationTimeISO8601 = "2021-11-02 15:00:00.000",
			id = 2
	}

	
	Example:
	POST http://localhost/v2/room/(0,0,0)

====================================================================	
Create a room
====================================================================
PUT /v2/room/{position} HTTP/1.1
Content-Type: application/json

	{
		description: "LirumLarum",
		creatorId: 42
	}

Response
	
	Status: 201 Created
	Location: /v2/room/{position}
	{
			creatorId: 42,
			description: "LirumLarum",
			creationTimeISO8601 = "2021-11-02 15:00:00.000",
			id = 2
	}

	
	Example:
	PUT http://localhost/v2/room/(0,0,0)
	
====================================================================
Get information about the room at position
====================================================================
GET /v2/room/{position}

Response

	Status: 200 OK
	{
	    description = "LirumLarum",
		creatorId = 42,
		creationTimeISO8601 = "2021-11-02 15:00:00.000",
		id = 2
	}
	
	Status: 404 Not Found
	(none)

	Example:
	GET http://localhost/v2/room/(0,0,0)


====================================================================
Get all possible exits from room at {position}
====================================================================
GET /v2/room/{position}/exits/

Response

	Status: 200 OK
	[
		NORTH,
		EAST,
		WEST,
		UP
	]	 
	Status: 404 Not Found
	(none)
	
	Example:
	GET http://localhost/v2/room/(0,0,0)/exits/
