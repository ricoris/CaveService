version: '3.4'
# Usage for caveservice

#  -- After update just run deploy again
#   docker stack deploy --with-registry-auth -c cs-swarm.yml csstack

# docker service ls

# services will be deployed on nodes with node.labels.type = services
# databases will be deployed on nodes with node.labels.type = database

services:
  caveservice:
    image: b33rsledge/caveservice:v2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
    environment:
      spring.redis.host: rediscs
      spring.redis.port: 6380
      spring.redis.timeout: 60000
      debug: "false"
      storage.room: redisStorage
    ports:
      - "8080:8080"
    networks:
      - cs-network
    depends_on:  #not working in swarm mode
      - rediscs
    command: java -jar /root/caveservice/caveservice.jar
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
  rediscs:
    image: redis:6.2.5-alpine
    command: --port 6380
    volumes:
      - redisdata_cs:/data/cs
    networks:
      - cs-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: "0.1"
          memory: 100M
  #    healthcheck:
  #      test: ["CMD", "redis-cli", "ping"]
  #      interval: 60s
  #      timeout: 3s
  #      retries: 5
  #visualizer:
#    image: dockersamples/visualizer
 #   volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock"
#    ports:
#      - "9000:8080"
#    networks:
#      - cs-network
#    deploy:
#      replicas: 1
#      restart_policy:
#        condition: on-failure
#      placement:
#        constraints:
#          - node.role == manager
volumes:
  redisdata_cs:
    external: false
networks:
  cs-network: {}
  public:
